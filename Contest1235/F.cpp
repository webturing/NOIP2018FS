#include<bits/stdc++.h>

using namespace std;

struct A {//定义一个结构体，存储两个值
    int dir;//方向。默认值0表示向右，-1表示向左
    int x;//蚂蚁的起始下标


    //重载小于号，排序的时候，按照下标来排序
    bool operator<(A other) const {
        return x < other.x;
    }
};

/*
蚂蚁感冒

关键点：两只蚂蚁迎头相碰，会原路返回，这一点我们可以直接当做两只蚂蚁互相穿过去了

算法思路：

(1)当第一只感冒的蚂蚁朝右移动时，
    由于所有蚂蚁速度相同，
    它右侧所有朝左的蚂蚁都会被传染，
    而右侧所有朝右的蚂蚁都不会被传染。
    如果它右侧有朝左的蚂蚁，
    那么这个蚂蚁会被传染，
    并且它将一直向左移动，
    感染第一只蚂蚁左侧的所有朝右的蚂蚁。
    而第一只蚂蚁左侧朝左的蚂蚁不受影响。
    
(2)当第一只感冒的蚂蚁朝左移动时，
    分析原理同上，不再详述。
*/
int main() {
    int n;
    cin >> n;
    vector <A> v(n);//定义长度为n的结构体类型动态数组
    for (int i = 0; i < n; i++) {
        cin >> v[i].x;//如果是负数，则是向左运动
        if (v[i].x < 0) {
            v[i].x *= -1;
            v[i].dir = -1;
        }
    }
    A first = v[0];//记录第一个蚂蚁的方向和位置
    sort(v.begin(), v.end());//将蚂蚁们按坐标排序
    int sum = 1;//至少有一只蚂蚁感冒，那就是第一只蚂蚁
    if (first.dir != -1) {//第一只感冒的蚂蚁方向朝右
        int rightFlag = 0;//用一个变量记录朝右行驶的蚂蚁会不会遇到朝左行驶的蚂蚁，它会被传染感冒，并且会传染第一只感冒蚂蚁左侧所有朝右移动的蚂蚁。
        for (int i = 0; i < n; i++) {
            if (v[i].x > first.x && v[i].dir == -1) {//第一只蚂蚁右侧的朝左行驶的蚂蚁都会被传染感冒
                sum++;//累加计数
                rightFlag = 1;//找到一只被第一只感冒的蚂蚁传染的朝左的蚂蚁就够了，它会传染所有第一只蚂蚁左侧的所有朝右移动的蚂蚁
            }
        }
        if (rightFlag) {//如果找到一只被第一只感冒的蚂蚁传染的朝左的蚂蚁，它会传染所有第一只蚂蚁左侧的所有朝右移动的蚂蚁
            for (int i = 0; i < n; i++) {
                if (v[i].x < first.x && v[i].dir == 0) {//第一只蚂蚁左侧的所有朝右移动的蚂蚁,会被第一只蚂蚁右侧朝左移动的蚂蚁传染
                    sum++;//累加计数
                }
            }
        }
    } else {//第一只感冒的蚂蚁方向朝左
        int leftFlag = 0;//用一个变量记录朝左行驶的蚂蚁会不会遇到朝右行驶的蚂蚁，它会被传染感冒，并且会传染第一只感冒蚂蚁右侧所有朝左移动的蚂蚁。
        for (int i = 0; i < n; i++) {
            if (v[i].x < first.x && v[i].dir == 0) {//第一只蚂蚁左侧的朝右行驶的蚂蚁都会被传染感冒
                sum++;//累加计数
                leftFlag = 1;//找到一只被第一只感冒的蚂蚁传染的朝右的蚂蚁就够了，它会传染所有第一只蚂蚁右侧的所有朝左移动的蚂蚁
            }
        }
        if (leftFlag) {//如果找到一只被第一只感冒的蚂蚁传染的朝右的蚂蚁，它会传染所有第一只蚂蚁右侧的所有朝左移动的蚂蚁
            for (int i = 0; i < n; i++) {
                if (v[i].x > first.x && v[i].dir == -1) {//第一只蚂蚁右侧的所有朝左移动的蚂蚁,会被第一只蚂蚁左侧朝右移动的蚂蚁传染
                    sum++;//累加计数
                }
            }
        }
    }
    cout << sum << endl;
    return 0;
}
